# Adjusted from https://github.com/jupyterhub/action-k3s-helm
---
name: K3S with Helm
description: |
  Install Kubernetes (K3S) and Helm.

inputs:
  k3s-channel:
    description: K3S channel (https://update.k3s.io/v1-release/channels)
    required: false
    default: ""

outputs:
  kubeconfig:
    description: Path to kubeconfig file
    value: ${{ steps.set-versions.outputs.kubeconfig }}
  k3s-version:
    description: "Installed k3s version, such as v1.20.0+k3s2"
    value: "${{ steps.set-versions.outputs.k3s-version }}"
  k8s-version:
    description: "Installed k8s version, such as v1.20.0"
    value: "${{ steps.set-versions.outputs.k8s-version }}"
  helm-version:
    description: "Installed helm version, such as v3.4.2"
    value: "${{ steps.set-versions.outputs.helm-version }}"

runs:
  using: "composite"
  steps:
    - name: Setup k3s ${{ inputs.k3s-channel }}
      run: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL="${{ inputs.k3s-channel }}" sh -s -
      shell: bash

    # By providing a kubeconfig owned by the current user with 600 permissions,
    # kubectl becomes usable without sudo, and helm won't emit warnings about
    # bloated access to group/world.
    - name: Prepare a kubeconfig in ~/.kube/config
      run: |
        mkdir -p ~/.kube
        sudo cat /etc/rancher/k3s/k3s.yaml > "$HOME/.kube/config"
        chmod 600 "$HOME/.kube/config"
        echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
      shell: bash

    - name: Setup Helm
      run: |
        curl -sf https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      shell: bash

    - name: Set version output
      id: set-versions
      run: |
        echo "::group::Set version output"
        echo "kubeconfig=$HOME/.kube/config" >> $GITHUB_OUTPUT
        echo "k3s-version=$(k3s --version | grep 'k3s' | sed 's/.*\(v[0-9][^ ]*\).*/\1/')" >> $GITHUB_OUTPUT
        echo "k8s-version=$(k3s --version | grep 'k3s' | sed 's/.*\(v[0-9][^+]*\).*/\1/')" >> $GITHUB_OUTPUT
        echo "::endgroup::"
      shell: bash

    - name: Wait for coredns, metrics server, traefik
      run: |
        # Wait for a few seconds to allow deployments spin up
        sleep 10

        kubectl rollout status --watch --timeout 300s deployment/coredns -n kube-system

        kubectl rollout status --watch --timeout 300s deployment/metrics-server -n kube-system

        kubectl wait --for=condition=complete --timeout=300s job/helm-install-traefik-crd -n kube-system || true
        kubectl wait --for=condition=complete --timeout=300s job/helm-install-traefik -n kube-system || true
        kubectl rollout status --watch --timeout 300s deployment/traefik -n kube-system
      shell: bash

