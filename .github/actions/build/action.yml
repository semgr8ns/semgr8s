name: build
description: 'Build semgr8s image'
inputs:
  image_registry:
    description: 'Image registry to be used'
    required: true
  image_repo:
    description: 'Image repository to be used'
    required: true
  image_tag:
    description: 'Image tag to be used'
    required: true
  ref_tags:
    description: 'Reference tags to be used'
    required: true
  image_labels:
    description: 'Image labels to be used'
    required: true
  repo_owner:
    description: 'Name of repository owner, e.g. "github.repository_owner" for ghcr.io'
    required: true
  repo_token:
    description: 'Access token for repository owner, e.g. "secrets.GITHUB_TOKEN" for ghcr.io'
    required: true
  cosign_version:
    description: 'Cosign version to be used'
    required: true
outputs:
  digest:
    description: "Image digest"
    value: ${{ steps.build.outputs.digest }}
runs:
  using: "composite"
  steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@11086d25041f77fe8fe7b9ea4e48e3b9192b8f19 # v3.1.2 (probably)
    - name: Set up Docker buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7 # v2.4.1
    - name: Login with registry
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
      with:
        registry: ${{ inputs.image_registry }}
        username: ${{ inputs.repo_owner }}
        password: ${{ inputs.repo_token }}
    - name: Generate tags
      id: tags
      run: |
        echo "${{ inputs.ref_tags }}"
        export PREFIX="${{ inputs.image_registry }}/${{ inputs.image_repo }}:"
        TAGS="${PREFIX}${{ inputs.image_tag }},$(echo ${{ inputs.ref_tags }} | tr ' ' '\n' | awk '{print "${PREFIX}"$1}' | envsubst | tr '\n' ',')"
        echo tags=${TAGS} >> ${GITHUB_OUTPUT}
      shell: bash
    - name: Build and push image
      id: build
      uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # v4.0.0
      with:
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        file: build/Dockerfile
        labels: ${{ inputs.image_labels }}
        tags: ${{ steps.tags.outputs.tags }}
        provenance: false  #TODO: Set to false, as resulting format is not OCI (GHCR) compliant (https://github.com/docker/build-push-action/issues/820) and causes problems with GHCR and e.g. image deletion (https://github.com/snok/container-retention-policy/issues/63)
        sbom: false  #TODO: Duplicates sboms manually created below
    - name: Create SBOM
      uses: anchore/sbom-action@07978da4bdb4faa726e52dfc6b1bed63d4b56479 # v0.13.3
      with:
        image: ${{ inputs.image_registry }}/${{ inputs.image_repo }}@${{ steps.build.outputs.digest }}
        format: cyclonedx-json
        artifact-name: sbom.cdx
        output-file: sbom.cdx
    - name: Sign image
      id: sign
      run: |
        cosign sign -a tag=${{ inputs.image_tag }} -y ${TAGS}
        cosign attest --type cyclonedx --predicate sbom.cdx -y ${TAGS}
      env:
        TAGS: ${{ inputs.image_registry }}/${{ inputs.image_repo }}@${{ steps.build.outputs.digest }}
      shell: bash
    - name: Verify build data
      id: verify
      run: |
        cosign tree ${TAGS}
        cosign verify --certificate-oidc-issuer "https://token.actions.githubusercontent.com" --certificate-identity-regexp "^https://github\.com/sse-secure-systems/semgr8s/" --certificate-github-workflow-repository "${{ github.repository }}" --certificate-github-workflow-ref "${{ github.ref }}" ${TAGS}
        cosign verify-attestation --type cyclonedx --certificate-oidc-issuer "https://token.actions.githubusercontent.com" --certificate-identity-regexp "^https://github\.com/sse-secure-systems/semgr8s/" --certificate-github-workflow-repository "${{ github.repository }}" --certificate-github-workflow-ref "${{ github.ref }}" ${TAGS}
        SIGNATURE=$(cosign triangulate ${TAGS})
        SBOM="${SIGNATURE::-4}.att"
        echo signature=${SIGNATURE} >> ${GITHUB_OUTPUT}
        echo sbom=${SBOM} >> ${GITHUB_OUTPUT}
      env:
        TAGS: ${{ inputs.image_registry }}/${{ inputs.image_repo }}@${{ steps.build.outputs.digest }}
      shell: bash
    - name: Show build and signature information
      run: |
        CONFIGURE="yq '. *+ load(\"tests/integration/var-img.yaml\")' tests/integration/ghcr-values.yaml > ghcr.yaml &&\n\t IMAGE=\"${{ inputs.image_registry }}/${{ inputs.image_repo }}\" TAG=\"${{ inputs.image_tag }}\" IMAGEPULLSECRET=\"<ImagePullSecret name>\" envsubst < ghcr.yaml > update &&\n\t yq '. *+ load(\"update\")' -i charts/semgr8s/values.yaml &&\n\t rm ghcr.yaml update"
        CONFIGURE=$(printf -- "${CONFIGURE}")
        HELM_PATCH="yq e '.deployment.image.repository = \"${{ inputs.image_registry }}/${{ inputs.image_repo }}\"' -i charts/semgr8s/values.yaml\nyq e '.deployment.image.tag = \"${{ inputs.image_tag }}\"' -i charts/semgr8s/values.yaml"
        HELM_PATCH=$(printf -- "${HELM_PATCH}")
        echo "# :building_construction: Build Information" >> ${GITHUB_STEP_SUMMARY}
        echo "<table>" >> ${GITHUB_STEP_SUMMARY}
        echo "<tr><th>Build artifacts</th><th>Value</th></tr>" >> ${GITHUB_STEP_SUMMARY}
        echo "<tr><td>Registry</td><td><code>${{ inputs.image_registry }}</code></td></tr>" >> ${GITHUB_STEP_SUMMARY}
        echo "<tr><td>Repository</td><td><code>${{ inputs.image_repo }}</code></td></tr>" >> ${GITHUB_STEP_SUMMARY}
        echo "<tr><td>Tags</td><td><code>${{ inputs.image_tag }}</code>, <code>${{ inputs.ref_tags }}</code></td></tr>" >> ${GITHUB_STEP_SUMMARY}
        echo "<tr><td>Workflow image</td><td><code>${{ inputs.image_registry }}/${{ inputs.image_repo }}:${{ inputs.image_tag }}</code></td></tr>" >> ${GITHUB_STEP_SUMMARY}
        echo "<tr><td>All reference tags</td><td><code>$(echo ${{ steps.tags.outputs.tags }} | tr ',' '\n')</code></td></tr>" >> ${GITHUB_STEP_SUMMARY}
        echo "<tr><td>Digest</td><td><code>${{ steps.build.outputs.digest }}</code></td></tr>" >> ${GITHUB_STEP_SUMMARY}
        echo "<tr><td>Signature</td><td><code>${{ steps.verify.outputs.signature }}</code></td></tr>" >> ${GITHUB_STEP_SUMMARY}
        echo "<tr><td>SBOM (cyclonedx-json)</td><td><code>${{ steps.verify.outputs.sbom }}</code></td></tr>" >> ${GITHUB_STEP_SUMMARY}
        echo "</table>" >> ${GITHUB_STEP_SUMMARY}
        echo "" >> ${GITHUB_STEP_SUMMARY}
        echo "<details><summary>:bookmark_tabs: Metadata</summary>" >> ${GITHUB_STEP_SUMMARY}
        echo "<pre><code>${{ steps.build.outputs.metadata }}</code></pre>" >> ${GITHUB_STEP_SUMMARY}
        echo "</details>" >> ${GITHUB_STEP_SUMMARY}
        echo "" >> ${GITHUB_STEP_SUMMARY}
        echo "<details><summary>:hammer_and_wrench: Use Build Artifacts</summary>" >> ${GITHUB_STEP_SUMMARY}
        echo "(might require <a href='https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry'>docker login via PAT</a> with package:read permission)" >> ${GITHUB_STEP_SUMMARY}
        echo "<ul>" >> ${GITHUB_STEP_SUMMARY}
        echo "<li><b>Workflow image reference</b> by tag: <pre><code>${{ inputs.image_registry }}/${{ inputs.image_repo }}:${{ inputs.image_tag }}</code></pre></li>" >> ${GITHUB_STEP_SUMMARY}
        echo "<li><b>Main image reference</b> by tag: <pre><code>${{ inputs.image_registry }}/${{ inputs.image_repo }}:$(echo ${{ inputs.ref_tags }} | tr ' ' '\n' | head -n1)</code></pre></li>" >> ${GITHUB_STEP_SUMMARY}
        echo "<li><b>Image reference</b> by digest: <pre><code>${{ inputs.image_registry }}/${{ inputs.image_repo }}@${{ steps.build.outputs.digest }}</code></pre></li>" >> ${GITHUB_STEP_SUMMARY}
        echo "<li><b>Cosign signature</b>: <pre><code>${{ steps.verify.outputs.signature }}</code></pre></li>" >> ${GITHUB_STEP_SUMMARY}
        echo "<li><b>Syft SBOM (cyclonedx-json)</b>: <pre><code>${{ steps.verify.outputs.sbom }}</code></pre></li>" >> ${GITHUB_STEP_SUMMARY}
        echo "<li>Pull via <b>Docker</b>: <pre lang="bash"><code>docker pull ${{ inputs.image_registry }}/${{ inputs.image_repo }}:${{ inputs.image_tag }}</code></pre></li>" >> ${GITHUB_STEP_SUMMARY}
        echo "<li>Use in <b>Helm chart</b>: <pre lang="bash"><code>${HELM_PATCH}</code></pre></li>" >> ${GITHUB_STEP_SUMMARY}
        echo "</ul>" >> ${GITHUB_STEP_SUMMARY}
        echo "</details>" >> ${GITHUB_STEP_SUMMARY}
        echo "" >> ${GITHUB_STEP_SUMMARY}
        echo "<details><summary>:mag: Verify Build</summary>" >> ${GITHUB_STEP_SUMMARY}
        echo "(might require <a href='https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry'>Docker login via PAT</a> with package:read permission)" >> ${GITHUB_STEP_SUMMARY}
        echo "<ul>" >> ${GITHUB_STEP_SUMMARY}
        echo "<li>Verify <b>Cosign signature</b> using <a href='https://docs.sigstore.dev/verifying/verify/#keyless-verification-using-openid-connect'>keyless OIDC signatures<a>: <pre lang="bash"><code>cosign verify --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' --certificate-identity-regexp '^https://github\.com/sse-secure-systems/semgr8s/' --certificate-github-workflow-repository '${{ github.repository }}' --certificate-github-workflow-ref '${{ github.ref }}' ${{ inputs.image_registry }}/${{ inputs.image_repo }}:${{ inputs.image_tag }} </code></pre></li>" >> ${GITHUB_STEP_SUMMARY}
        echo "<li>Verify <b>Cosign signature</b> : <pre lang="bash"><code> cosign verify --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' --certificate-identity-regexp '^https://github\.com/sse-secure-systems/semgr8s/' --certificate-github-workflow-repository '${{ github.repository }}' --certificate-github-workflow-ref '${{ github.ref }}' ${{ inputs.image_registry }}/${{ inputs.image_repo }}:${{ inputs.image_tag }} </code></pre></li>" >> ${GITHUB_STEP_SUMMARY}
        echo "<li>Display all <b>Cosign supply chain security artifacts</b>: <pre lang="bash"><code>cosign tree ${{ inputs.image_registry }}/${{ inputs.image_repo }}:${{ inputs.image_tag }} </code></pre></li>" >> ${GITHUB_STEP_SUMMARY}
        echo "<li>Download <b>Cosign-attached SBOM</b> (syft-generated cyclonedx-json): <pre lang="bash"><code>
        cosign verify-attestation --type cyclonedx \\
        --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' --certificate-identity-regexp '^https://github\.com/sse-secure-systems/semgr8s/' --certificate-github-workflow-repository '${{ github.repository }}' --certificate-github-workflow-ref '${{ github.ref }}' \
        ${{ inputs.image_registry }}/${{ inputs.image_repo }}:${{ inputs.image_tag }} \\
        | jq -r '.payload' | base64 -d | jq '.predicate' > sbom.cdx
          </code></pre></li>" >> ${GITHUB_STEP_SUMMARY}
        echo "</ul>" >> ${GITHUB_STEP_SUMMARY}
        echo "</details>" >> ${GITHUB_STEP_SUMMARY}
        echo "" >> ${GITHUB_STEP_SUMMARY}
        echo "Let's start testing :rocket:" >> ${GITHUB_STEP_SUMMARY}
      shell: bash
